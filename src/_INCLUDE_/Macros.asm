; =========================================================================================================================================================
; Mighty The Armadillo in PRISM PARADISE
; By Nat The Porcupine 2021
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; User Defined Macros
; =========================================================================================================================================================
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Start the lag-o-meter
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
lagOn		macro
		if ENABLE_LAGMETER
			move.w	#$9193,VDP_CTRL
		endif
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Stop the lag-o-meter
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
lagOff		macro
		if ENABLE_LAGMETER
			move.w	#$9100,VDP_CTRL
		endif
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Disable display
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
displayOff	macro
		move.w	rVDPReg1.w,d0
		andi.b	#%10111111,d0
		move.w	d0,VDP_CTRL
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Enable display
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
displayOn	macro
		move.w	rVDPReg1.w,d0
		ori.b	#%01000000,d0
		move.w	d0,VDP_CTRL
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Move the HUD down
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
moveHUDDown	macros
		move.l	#-$80000,rHUD_Accel.w		; Set to move HUD down
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Move the HUD up
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
moveHUDUp	macros
		move.l	#$8000,rHUD_Accel.w		; Set to move HUD up
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Convert a string to the textbox's format and store as a line
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	str	- The string
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtLine		macro	str
c		= 1
		rept	strlen(\str)
ochar			substr c, c, \str
char			substr "\ochar"-$1F, "\ochar"-$1F, "skojh`aledisfsg\0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ABCDEFGHIJKLMNOPQRSTUVWXYZncmb"
			dc.w	"\char"+$588
c			= c+1
		endr
		dc.w	$FFFF
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add a line break character to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtLineBreak	macros
		dc.w	$FFFF
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add a message terminator character to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtLineEnd	macros
		dc.w	0
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add an animation change flag to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	ani	- New animation script pointer
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtNewAni	macro	ani
		dc.w	$FFFE
		dc.l	\ani
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add an icon change flag to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	icon	- New icon art pointer
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtNewIcon	macro	icon
		dc.w	$FFFD
		dc.l	\icon
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add a finished flag to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtEnd		macros
		dc.w	$FFFC
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add an entry to the level art animation script
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	duration	- Global duration
;	artaddr		- Source art
;	tileid		- Destination tile ID
;	numentries	- Number of entries
;	numvramtiles	- Number of tiles per entry
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
lvlAniDat	macro	duration, artaddr, tileid, numentries, numvramtiles
		dc.l	(\duration&$FF)<<24|\artaddr
		dc.w	((\tileid&$7FF)<<5)
		dc.b	\numentries, \numvramtiles
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Get a unique character set from a string
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	string		- String to go throuhg
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	unique_chars	- A string of unique characters found
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
getUniqueChars	macro	string
unique_chars	substr 1,1,\string
strpos		= 1

		while strpos<strlen(\string)
found			= 0
pos			= 0
char			substr strpos+1,strpos+1,\string

			while (pos<strlen("\unique_chars"))&(found=0)
uchar				substr pos+1,pos+1,"\unique_chars"
				if strcmp("\uchar","\char")|strcmp("\char", " ")
found					= 1
				endif
pos				= pos+1
			endw

			if found=0
unique_chars			equs "\unique_chars\\char"
			endif
strpos			= strpos+1

			endw
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Run objects macro
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
runObjects		macro
		movea.w	rTailNext.w,a0				; load first object slot into a0
		move.l	oAddr(a0),a1				; load its pointer to a1
		jsr	(a1)					; jump to its code
	endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Next object macro
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
nextObject		macro
		movea.w	oNext(a0),a0				; load the next object address to a0
		move.l	oAddr(a0),a1				; load its pointer to a1
		jmp	(a1)					; jump to its code
	endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add sprite to a display list
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	layer	- The destination display layer
;	obj 	- The address register for the source object
;	fre 	- A free-to-user address register
;	chk	- If 1, the code also checks if the object is displayed already
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
displaySprite		macro	layer, obj, fre, chk
;	if layer >= 8
;		inform 2,"Invalid display layer!"
;	endif

	if \chk
		tst.w	oDrawNext(\obj)					; check if displayed already
		bne.s	.no\@						; if yes, skip
	endif

		move.w	#rDispInput+(\layer*dSize),oDrawNext(\obj)	; put end marker as the next pointer
		move.w	rDispInput+dPrev+(\layer*dSize).w,\fre		; copy the pointer from the end marker to dst register
		move.w	\fre,oDrawPrev(\obj)				; copy that to prev pointer
		move.w	\obj,oDrawNext(\fre)				;
		move.w	\obj,rDispInput+dPrev+(\layer*dSize).w		; copy the pointer from the end marker to dst register

		cmp.w	#rDispInput+(\layer*dSize),rDispInput+dPrev+(\layer*dSize).w	; special case: points to itself
		bne.s	.no\@								; if no, skip
		move.w	\obj,rDispInput+dPrev+(\layer*dSize).w				; else, copy over

.no\@
	endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add sprite to a display list using an address register
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	reg	- The address regsister containing target
;	obj 	- The address register for the source object
;	fre 	- A free-to-user address register
;	chk	- If 1, the code also checks if the object is displayed already
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
displaySpriteReg		macro	reg, obj, fre, chk
	local layer
layer EQUR	\reg							; convert register

	if \chk
		tst.w	oDrawNext(\reg)					; check if displayed already
		bne.s	.no\@						; if yes, skip
	endif

		move.w	layer,oDrawNext(\obj)				; put end marker as the next pointer
		move.w	oDrawPrev(layer),\fre				; copy the pointer from the end marker to dst register
		move.w	\fre,oDrawPrev(\obj)				; copy that to prev pointer
		move.w	\obj,oDrawNext(\fre)				;
		move.w	\obj,oDrawPrev(layer)				; copy the pointer from the end marker to dst register

		cmp.w	oDrawPrev(layer),layer				; special case: points to itself
		bne.s	.no\@						; if no, skip
		move.w	\obj,oDrawPrev(layer)				; else, copy over
.no\@
	endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Remove a sprite from a display list
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; PARAMETERS:
;	obj 	- The address register for the source object
;	fre 	- A free-to-user address register
;	chk	- If 1, the code also checks if the object is displayed already
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
removeSprite		macro	obj, fre, chk
	if \chk
		tst.w	oDrawNext(\obj)					; check if displayed already
		beq.s	.yes\@						; if not, skip
	endif

		move.w	oDrawPrev(\obj),\fre				; load the prev pointer to dst
		move.w	oDrawNext(\obj),oDrawNext(\fre)			; copy the next object pointer from src to dst
		move.w	oDrawNext(\obj),\fre				; load the next pointer to dst
		move.w	oDrawPrev(\obj),oDrawPrev(\fre)			; copy the prev object pointer from src to dst

		cmp.w	oDrawPrev(\obj),\fre				; special case: last object
		bne.s	.no\@						; if no, skip
		move.w	\fre,oDrawNext(\fre)				; else, change to point to same address

.no\@
		clr.l	oDrawNext(\obj)
.yes\@
	endm
; =========================================================================================================================================================